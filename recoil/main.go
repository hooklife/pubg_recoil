package recoil

import (
	"math"
	"math/rand"
	"yaqiang/mcuapp"
	"time"
	"yaqiang/global"
)

type recoil  struct {
	Basic []float64
	Quadruple []float64
	Speed float64
}

var recoilData = map[string] recoil {
	"ump":{
		[]float64{18,19,18,19,18,19,19,21,23,24,23,24,23,24,23,24,23,24,23,24,23,24,24,25,24,25,24,25,24,25,24,25,25,26,25,26,25,26,25,26,25,26,25,26,25,26},
		[]float64{83.3,83.3,83.3,83.3,83.3,83.3,83.3,116.7,116.7,116.7,116.7,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3},
		92,
	},
	"akm":{
		[]float64{23.7,23.7,23.7,23.7,23.7,23.7,23.7,23.7,23.7,23.7,23.7,28,28,28,28,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7,29.7},
		[]float64{66.7,66.7,66.7,66.7,66.7,66.7,66.7,66.7,66.7,66.7,66.7,123.3,123.3,123.3,123.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3,93.3},
		100,
	},
	"m16a4":{
		[]float64{25,25,25,29,33,33,32,33,32,32,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
		[]float64{86.7,86.7,86.7,86.7,86.7,86.7,86.7,150,150,150,150,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120},
		75,
	},
	"m416":{
		[]float64{21,21,21,21,21,21,21,21,21,23,23,24,23,24,25,25,26,27,27,32,31,31,31,31,31,31,31,32,32,32,35,35,35,35,35,35,35,35,35,35,35},
		[]float64{86.7,86.7,86.7,86.7,86.7,86.7,86.7,150,150,150,150,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7},
		86,
	},
	"scarl":{
		[]float64{20,21,22,21,22,22,23,22,23,23,24,24,25,25,25,25,26,27,28,29,30,32,34,34,35,34,35,34,35,34,35,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35},
		[]float64{86.7,86.7,86.7,86.7,86.7,86.7,86.7,150,150,150,150,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7,96.7},
		96,
	},
	"uzi":{
		[]float64{16,17,18,20,21,22,23,24,25,26,28,30,32,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},
		[]float64{13.3,13.3,13.3,13.3,13.3,21.7,21.7,21.7,21.7,21.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7,46.7},
		48,
	},
}


var recoilMode = "basic"
var randMax = 1.3

func Start() {
	var shootTime = 0
	for  {
		if global.MouseLeftDown == false {
			break
		}
		weaponIntervals,recoilRecovery := CalcRecoilVal("m416",shootTime)
		mcuapp.MiddleClick()
		mcuapp.MoveToR(0,recoilRecovery)
		time.Sleep(time.Duration(weaponIntervals))
		shootTime = shootTime +  weaponIntervals
	}
}
// weapon 枪械名称   duration
func CalcRecoilVal(weapon string, duration int) ( int,int)  {
	step := int(math.Floor(float64(duration)/100))
	if step>40 {
		step = 40
	}
	weaponRecoil := recoilData[weapon].Basic[step]
	weaponSpeed := recoilData[weapon].Speed
	// 倍数计算
	coefficient := random(1,randMax)
	// 射击周期 (基础射速 * 倍数)
	weaponIntervals := coefficient* weaponSpeed
	// 处理随机间隔后的后坐力
	recoilRecovery := weaponRecoil * weaponIntervals / 100
	//print(int(weaponIntervals))
	return int(weaponIntervals),int(recoilRecovery)
}

func random(min, max float64) float64 {
	return rand.Float64() * (max - min) + min
}